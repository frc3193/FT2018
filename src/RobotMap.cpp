// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<frc::SpeedController> RobotMap::chassisleftA;
std::shared_ptr<frc::SpeedController> RobotMap::chassisleftB;
std::shared_ptr<frc::SpeedController> RobotMap::chassisleftC;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::chassisleft;
std::shared_ptr<frc::SpeedController> RobotMap::chassisrightA;
std::shared_ptr<frc::SpeedController> RobotMap::chassisrightB;
std::shared_ptr<frc::SpeedController> RobotMap::chassisrightC;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::chassisright;
std::shared_ptr<frc::RobotDrive> RobotMap::chassisrobotDrive;
std::shared_ptr<frc::Encoder> RobotMap::chassisdriveEncoder;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::chassisshifter;
std::shared_ptr<frc::SpeedController> RobotMap::elevatorlift;
std::shared_ptr<frc::DigitalInput> RobotMap::elevatorswitchBottom;
std::shared_ptr<frc::DigitalInput> RobotMap::elevatorswitchTop;
std::shared_ptr<frc::SpeedController> RobotMap::intakeleft;
std::shared_ptr<frc::SpeedController> RobotMap::intakeright;
std::shared_ptr<frc::Servo> RobotMap::intakeservoLeft;
std::shared_ptr<frc::Servo> RobotMap::intakeservoRight;
std::shared_ptr<frc::Compressor> RobotMap::pressurizerCompressor;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::rampleft;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::rampright;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<frc::ADXRS450_Gyro> RobotMap::chassisGyro;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::rampdeployer;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    chassisleftA.reset(new frc::VictorSP(0));
    lw->AddActuator("Chassis", "leftA", std::static_pointer_cast<frc::VictorSP>(chassisleftA));
    
    chassisleftB.reset(new frc::VictorSP(1));
    lw->AddActuator("Chassis", "leftB", std::static_pointer_cast<frc::VictorSP>(chassisleftB));
    
    chassisleftC.reset(new frc::VictorSP(19));
    lw->AddActuator("Chassis", "leftC", std::static_pointer_cast<frc::VictorSP>(chassisleftC));
    
    chassisleft = std::make_shared<frc::SpeedControllerGroup>(*chassisleftA, *chassisleftB , *chassisleftC );
    lw->AddActuator("Chassis", "left", chassisleft);

    chassisrightA.reset(new frc::VictorSP(2));
    lw->AddActuator("Chassis", "rightA", std::static_pointer_cast<frc::VictorSP>(chassisrightA));
    
    chassisrightB.reset(new frc::VictorSP(3));
    lw->AddActuator("Chassis", "rightB", std::static_pointer_cast<frc::VictorSP>(chassisrightB));
    
    chassisrightC.reset(new frc::VictorSP(18));
    lw->AddActuator("Chassis", "rightC", std::static_pointer_cast<frc::VictorSP>(chassisrightC));
    
    chassisright = std::make_shared<frc::SpeedControllerGroup>(*chassisrightA, *chassisrightB , *chassisrightC );
    lw->AddActuator("Chassis", "right", chassisright);
    
    chassisrobotDrive.reset(new frc::RobotDrive(chassisleft, chassisright));
    
    chassisrobotDrive->SetSafetyEnabled(true);
        chassisrobotDrive->SetExpiration(0.1);
        chassisrobotDrive->SetSensitivity(0.5);
        chassisrobotDrive->SetMaxOutput(1.0);

    chassisdriveEncoder.reset(new frc::Encoder(0, 3, false, frc::Encoder::k4X));
    lw->AddSensor("Chassis", "driveEncoder", chassisdriveEncoder);
    chassisdriveEncoder->SetDistancePerPulse(1.0);
    chassisdriveEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);
    chassisshifter.reset(new frc::DoubleSolenoid(0, 6, 7));
    lw->AddActuator("Chassis", "shifter", chassisshifter);
    
    elevatorlift.reset(new frc::VictorSP(4));
    lw->AddActuator("Elevator", "lift", std::static_pointer_cast<frc::VictorSP>(elevatorlift));
    
    elevatorswitchBottom.reset(new frc::DigitalInput(1));
    lw->AddSensor("Elevator", "switchBottom", elevatorswitchBottom);
    
    elevatorswitchTop.reset(new frc::DigitalInput(2));
    lw->AddSensor("Elevator", "switchTop", elevatorswitchTop);
    
    intakeleft.reset(new frc::VictorSP(5));
    lw->AddActuator("Intake", "left", std::static_pointer_cast<frc::VictorSP>(intakeleft));
    
    intakeright.reset(new frc::VictorSP(6));
    lw->AddActuator("Intake", "right", std::static_pointer_cast<frc::VictorSP>(intakeright));
    
    intakeservoLeft.reset(new frc::Servo(7));
    lw->AddActuator("Intake", "servoLeft", intakeservoLeft);
    
    intakeservoRight.reset(new frc::Servo(8));
    lw->AddActuator("Intake", "servoRight", intakeservoRight);
    
    pressurizerCompressor.reset(new frc::Compressor(0));

    lw->AddActuator("Pressurizer", "Compressor", pressurizerCompressor);
    
    rampleft.reset(new frc::DoubleSolenoid(0, 2, 3));
    lw->AddActuator("Ramp", "left", rampleft);
    
    rampright.reset(new frc::DoubleSolenoid(0, 4, 5));
    lw->AddActuator("Ramp", "right", rampright);
    
    rampdeployer.reset(new frc::DoubleSolenoid(0, 0, 1));
    lw->AddActuator("Ramp", "deployer", rampdeployer);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    chassisGyro.reset(new ADXRS450_Gyro(SPI::Port::kOnboardCS0));

}
