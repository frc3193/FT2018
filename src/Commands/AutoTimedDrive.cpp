// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutoTimedDrive.h"
#include "../Subsystems/Chassis.h"

AutoTimedDrive::AutoTimedDrive(double timeout): Command(), mTimeout(timeout) {
    // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::chassis.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	currentAngle = 0;
	kP_ang = 0.03;
	mTimeout = Robot::chassis->timePref;
}


// Called just before this Command runs the first time
void AutoTimedDrive::Initialize() {
	SetTimeout(mTimeout);
	Robot::chassis->gyro->Reset();
	//Robot::chassis->driveEncoder->Reset(); // /shrug  this is the only thing that had the word "Reset" in it.
	Robot::chassis->shifter->Set(DoubleSolenoid::kReverse);
}

// Called repeatedly when this Command is scheduled to run currentAngle * kP_ang)
void AutoTimedDrive::Execute() {
	Robot::chassis->robotDrive->Drive(-0.2, currentAngle*kP_ang*-1);
}

// Make this return true when this Command no longer needs to run execute()
bool AutoTimedDrive::IsFinished() {
	return IsTimedOut();
}

// Called once after isFinished returns true
void AutoTimedDrive::End() {
	Robot::chassis->leftA->Set(0.0);
	Robot::chassis->leftB->Set(0.0); //if there's more, you should add more. but we split 'em so it's all good as in: B = (B+C)
	Robot::chassis->rightA->Set(0.0);
	Robot::chassis->rightB->Set(0.0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoTimedDrive::Interrupted() {
	Robot::chassis->leftA->Set(0.0);
	Robot::chassis->leftB->Set(0.0);
	Robot::chassis->rightA->Set(0.0);
	Robot::chassis->rightB->Set(0.0);
}
