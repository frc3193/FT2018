// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DoNothing.h"
#include "Commands/RampDeploy.h"
#include "Commands/RampLeftToggle.h"
#include "Commands/RampRightToggle.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DoNothing::DoNothing(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::ramp.get());

}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DoNothing::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void DoNothing::Execute() {
	if (Robot::oi->getfightStick()->GetRawButton(8) && Robot::ramp->timerDeploy.HasPeriodPassed(2)){ // ramp deploy on OPTIONS button
		if (Robot::ramp->deployer->Get() == frc::DoubleSolenoid::Value::kForward) {
				Robot::ramp->deployer->Set(frc::DoubleSolenoid::Value::kReverse);
		}
			else {
				Robot::ramp->deployer->Set(frc::DoubleSolenoid::Value::kForward);
			}
		Robot::ramp->timerDeploy.Reset();
	}

	if (Robot::oi->getfightStick()->GetRawButton(9) && Robot::ramp->timerDeploy.HasPeriodPassed(2)){ // ramp left on L3
		if (Robot::ramp->left->Get() == frc::DoubleSolenoid::Value::kForward) {
				Robot::ramp->left->Set(frc::DoubleSolenoid::Value::kReverse);
		}
			else {
				Robot::ramp->left->Set(frc::DoubleSolenoid::Value::kForward);
			}
		Robot::ramp->timerLeft.Reset();
	}

	if (Robot::oi->getfightStick()->GetRawButton(10) && Robot::ramp->timerRight.HasPeriodPassed(2)){ // ramp right on R3
		if (Robot::ramp->right->Get() == frc::DoubleSolenoid::Value::kForward) {
				Robot::ramp->right->Set(frc::DoubleSolenoid::Value::kReverse);
		}
			else {
				Robot::ramp->right->Set(frc::DoubleSolenoid::Value::kForward);
			}
		Robot::ramp->timerRight.Reset();
	}
}


// Make this return true when this Command no longer needs to run execute()
bool DoNothing::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void DoNothing::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DoNothing::Interrupted() {

}
