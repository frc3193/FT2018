// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "AutoLeft.h"
#include "AutoDrive.h"
#include "AutoIntakeReverse.h"
#include "AutoTurn.h"
#include "../Robot.h"
#include "ElevatorUP.h"
#include "IntakeOpen.h"
#include "TimedElevatorUP.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoLeft::AutoLeft() {
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	goalPos = "";
	while (goalPos == ""){
		goalPos = frc::DriverStation::GetInstance().GetGameSpecificMessage();
	}
		if(goalPos[0] == 'L'){
			// switch
			AddSequential(new AutoDrive(168, true, 5)); // move to center of the scale
			AddSequential(new AutoTurn(90, false, 3)); // turn to face it
			AddSequential(new IntakeOpen()); // lower the intake
			AddSequential(new AutoDrive(42, true, 2)); // get right up against the close scale
			AddSequential(new TimedElevatorUP(1.5));
			AddSequential(new AutoIntakeReverse(2));
		}

		else if(goalPos[1] == 'L'){
			// scale
			AddSequential(new AutoDrive(324, true, 6)); // move to center of the scale
			AddSequential(new AutoTurn(90, false, 3)); // turn to face it
			AddSequential(new IntakeOpen()); // lower the intake
			AddSequential(new TimedElevatorUP(1.5));
			AddSequential(new AutoDrive(42, true, 2));
			AddSequential(new AutoIntakeReverse(2));
		}

		else {
			// going straight (to cross that bonus line)
			AddSequential(new AutoDrive(196, true, 5)); // move where i think the best spot for the driver to begin control would be, right after the close scale a little after the "PLATFORM ZONE" begins.
		}

    // Add Commands here:
    // e.g. AddSequential(new Command1());
    //      AddSequential(new Command2());
    // these will run in order.

    // To run multiple commands at the same time,
    // use AddParallel()
    // e.g. AddParallel(new Command1());
    //      AddSequential(new Command2());
    // Command1 and Command2 will run in parallel.

    // A command group will require all of the subsystems that each member
    // would require.
    // e.g. if Command1 requires chassis, and Command2 requires arm,
    // a CommandGroup containing them would require both the chassis and the
    // arm.
              // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
              // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
 };
